// Generated by CoffeeScript 1.4.0
(function() {
  var Snockets, func, name, snockets, src, testSuite, _fn;

  Snockets = require('../lib/snockets');

  src = '../test/assets';

  snockets = new Snockets({
    src: src
  });

  testSuite = {
    'Independent JS files have no dependencies': function(test) {
      return snockets.scan('b.js', function(err) {
        if (err) {
          throw err;
        }
        test.ok(snockets.depGraph.map['b.js']);
        test.deepEqual(snockets.depGraph.getChain('b.js'), []);
        return test.done();
      });
    },
    'Single-step dependencies are correctly recorded': function(test) {
      return snockets.scan('a.coffee', function(err) {
        if (err) {
          throw err;
        }
        test.deepEqual(snockets.depGraph.getChain('a.coffee'), ['b.js']);
        return test.done();
      });
    },
    'Dependencies with multiple extensions are accepted': function(test) {
      return snockets.scan('testing.js', function(err) {
        if (err) {
          throw err;
        }
        test.deepEqual(snockets.depGraph.getChain('testing.js'), ['1.2.3.coffee']);
        return test.done();
      });
    },
    'Dependencies can have subdirectory-relative paths': function(test) {
      return snockets.scan('song/loveAndMarriage.js', function(err) {
        if (err) {
          throw err;
        }
        test.deepEqual(snockets.depGraph.getChain('song/loveAndMarriage.js'), ['song/horseAndCarriage.coffee']);
        return test.done();
      });
    },
    'Multiple dependencies can be declared in one require directive': function(test) {
      return snockets.scan('poly.coffee', function(err) {
        if (err) {
          throw err;
        }
        test.deepEqual(snockets.depGraph.getChain('poly.coffee'), ['b.js', 'x.coffee']);
        return test.done();
      });
    },
    'Chained dependencies are correctly recorded': function(test) {
      return snockets.scan('z.coffee', function(err) {
        if (err) {
          throw err;
        }
        test.deepEqual(snockets.depGraph.getChain('z.coffee'), ['x.coffee', 'y.js']);
        return test.done();
      });
    },
    'Dependency cycles cause no errors during scanning': function(test) {
      return snockets.scan('yin.js', function(err) {
        if (err) {
          throw err;
        }
        test.throws(function() {
          return snockets.depGraph.getChain('yin.js');
        });
        test.throws(function() {
          return snockets.depGraph.getChain('yang.coffee');
        });
        return test.done();
      });
    },
    'require_tree works for same directory': function(test) {
      return snockets.scan('branch/center.coffee', function(err) {
        var chain;
        if (err) {
          throw err;
        }
        chain = snockets.depGraph.getChain('branch/center.coffee');
        test.deepEqual(chain, ['branch/edge.coffee', 'branch/periphery.js', 'branch/subbranch/leaf.js']);
        return test.done();
      });
    },
    'require works for includes that are relative to orig file using ../': function(test) {
      return snockets.scan('first/syblingFolder.js', function(err) {
        var chain;
        if (err) {
          throw err;
        }
        chain = snockets.depGraph.getChain('first/syblingFolder.js');
        test.deepEqual(chain, ['sybling/sybling.js']);
        return test.done();
      });
    },
    'require_tree works for nested directories': function(test) {
      return snockets.scan('fellowship.js', function(err) {
        var chain;
        if (err) {
          throw err;
        }
        chain = snockets.depGraph.getChain('fellowship.js');
        test.deepEqual(chain, ['middleEarth/legolas.coffee', 'middleEarth/shire/bilbo.js', 'middleEarth/shire/frodo.coffee']);
        return test.done();
      });
    },
    'require_tree works for redundant directories': function(test) {
      return snockets.scan('trilogy.coffee', function(err) {
        var chain;
        if (err) {
          throw err;
        }
        chain = snockets.depGraph.getChain('trilogy.coffee');
        test.deepEqual(chain, ['middleEarth/shire/bilbo.js', 'middleEarth/shire/frodo.coffee', 'middleEarth/legolas.coffee']);
        return test.done();
      });
    },
    'getCompiledChain returns correct .js filenames and code': function(test) {
      return snockets.getCompiledChain('z.coffee', function(err, chain) {
        if (err) {
          throw err;
        }
        test.deepEqual(chain, [
          {
            filename: 'x.js',
            js: '(function() {\n  "Double rainbow\\nSO INTENSE";\n}).call(this);\n'
          }, {
            filename: 'y.js',
            js: '//= require x'
          }, {
            filename: 'z.js',
            js: '(function() {\n\n}).call(this);\n'
          }
        ]);
        return test.done();
      });
    },
    'getCompiledChain returns correct .js filenames and code with ../ in require path': function(test) {
      return snockets.getCompiledChain('first/syblingFolder.js', function(err, chain) {
        if (err) {
          throw err;
        }
        test.deepEqual(chain, [
          {
            filename: 'sybling/sybling.js',
            js: 'var thereWillBeJS = 3;'
          }, {
            filename: 'first/syblingFolder.js',
            js: '//= require ../sybling/sybling.js'
          }
        ]);
        return test.done();
      });
    },
    'getConcatenation returns correct raw JS code with ../ in require path': function(test) {
      return snockets.getConcatenation('first/syblingFolder.js', function(err, js1, changed) {
        if (err) {
          throw err;
        }
        test.equal(js1, "var thereWillBeJS = 3;\n//= require ../sybling/sybling.js");
        return test.done();
      });
    },
    'getConcatenation returns correct raw JS code': function(test) {
      return snockets.getConcatenation('z.coffee', function(err, js1, changed) {
        if (err) {
          throw err;
        }
        test.equal(js1, "(function() {\n  \"Double rainbow\\nSO INTENSE\";\n}).call(this);\n\n//= require x\n(function() {\n\n}).call(this);\n");
        return snockets.getConcatenation('z.coffee', function(err, js2, changed) {
          if (err) {
            throw err;
          }
          test.ok(!changed);
          test.equal(js1, js2);
          return test.done();
        });
      });
    },
    'getConcatenation returns correct minified JS code': function(test) {
      return snockets.getConcatenation('z.coffee', {
        minify: true
      }, function(err, js) {
        if (err) {
          throw err;
        }
        test.equal(js, "(function(){\"Double rainbow\\nSO INTENSE\"}).call(this),function(){}.call(this)");
        return test.done();
      });
    },
    'getConcatenation caches minified JS code': function(test) {
      var flags;
      flags = {
        minify: true
      };
      return snockets.getConcatenation('jquery-1.6.4.js', flags, function(err, js, changed) {
        var startTime;
        if (err) {
          throw err;
        }
        startTime = new Date;
        return snockets.getConcatenation('jquery-1.6.4.js', flags, function(err, js, changed) {
          var endTime;
          if (err) {
            throw err;
          }
          test.ok(!changed);
          endTime = new Date;
          test.ok(endTime - startTime < 10);
          return test.done();
        });
      });
    }
  };

  _fn = function(func) {
    exports[name] = function(test) {
      snockets.options.async = true;
      return func(test);
    };
    return exports[name + ' (sync)'] = function(test) {
      snockets.options.async = false;
      return func(test);
    };
  };
  for (name in testSuite) {
    func = testSuite[name];
    _fn(func);
  }

}).call(this);
